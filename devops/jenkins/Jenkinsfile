pipeline {
    agent
    {
        node
        {
            label 'python'
        }
    }
    environment
    {
        VENV_NAME = "build-venv"
        AWS_REGION = credentials("aws_region")
        // AWS_PROFILE = credentials("aws_profile")
        ECR_REGISTRY = credentials("ecr_registry_url")
        ECR_REPOSITORY = "flaskgpt-app"
        REPOSITORY_URI = "${ECR_REGISTRY}/${ECR_REPOSITORY}"
        // OPENAI_API_KEY = credentials("OPENAI_API_KEY")  // TODO: add to credentials
    }

    stages
    {
        stage("Setup Python Environment")
        {
            steps
            {
                echo "----------------- START PYTHON SETUP -----------------"
                sh """
                    python3.9 -m venv ${WORKSPACE}/${VENV_NAME}
                    . ${WORKSPACE}/${VENV_NAME}/bin/activate
                    pip install -r requirements-dev.txt
                """
                echo "------------------ END PYTHON SETUP ------------------"
            }
        }

        stage("Get Version") 
        {
            steps 
            {
                script 
                {
                    env.VERSION = sh(
                        script: ". ${WORKSPACE}/${VENV_NAME}/bin/activate && python3 ${WORKSPACE}/util/get_version.py ${WORKSPACE}", 
                        returnStdout: true
                    ).trim()
                    echo "Version: ${env.VERSION}"
                }
            }
        }

        stage("Run Tests") 
        {
            steps 
            {
                echo "----------------- START Testing -----------------"
                withCredentials([string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY')]) 
                {
                    sh """
                        . $WORKSPACE/${VENV_NAME}/bin/activate
                        export PYTHONPATH=${WORKSPACE}
                        pytest tests/ -vv
                    """
                }
                echo "------------------ END Testing ------------------"
            }
        }

        stage("Linting the code") 
        {
            steps 
            {
                echo "----------------- START LINTING -----------------"
                sh """
                    . $WORKSPACE/${VENV_NAME}/bin/activate
                    pylint run.py website/
                """
                echo "------------------ END LINTING ------------------"
            }
        }
        
        stage("Building Docker Image")
        {
            steps {
                script {
                    echo "----------------- START BUILDING DOCKER IMAGE -----------------"
                    sh "docker build -t $ECR_REPOSITORY:$VERSION ."
                    echo "------------------ END BUILDING DOCKER IMAGE ------------------"
                }
            }
        }



        stage("Login to ECR") {
            steps {
                echo "------------------- LOGIN TO ECR ---------------------"
                withCredentials([
                    string(credentialsId: 'aws_access_key_id', variable: 'AWS_ACCESS_KEY_ID'), 
                    string(credentialsId: 'aws_secret_access_key', variable: 'AWS_SECRET_ACCESS_KEY'), 
                    string(credentialsId: 'aws_region', variable: 'AWS_REGION'), 
                    string(credentialsId: 'ecr_registry_url', variable: 'ECR_REGISTRY'),
                    string(credentialsId: 'aws_profile', variable: 'AWS_PROFILE')
                ]) {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    """
                }
                echo "------------------ END LOGIN TO ECR ------------------"
            }
        }

        stage("Publish Docker Image to ECR") 
        {
            steps 
            {
                script 
                {
                    echo '<--------------- DOCKER PUBLISH START --------------->'
                    sh "docker tag $ECR_REPOSITORY:$VERSION $REPOSITORY_URI:$VERSION"
                    sh "docker push $REPOSITORY_URI:$VERSION"
                    echo '<---------------- DOCKER PUBLISH END ---------------->'
                }
            }
        }

        stage('Get EKS cluster credentials')
        {
            steps
            {
                script
                {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'app_user-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'aws eks update-kubeconfig --region $AWS_REGION --name app-eks-01'
                    }
                }
            }
        }

        starge("Create Kubernetes secret")
        {
            steps
            {
                script
                {
                    withCredentials([string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY')]) 
                    {
                        sh """
                            kubectl create secret generic openai-secret --from-literal=OPENAI_API_KEY=$OPENAI_API_KEY --dry-run=client -o yaml | kubectl apply -f -
                        """
                    }
                }
            }
        }

        // stage("Deploy") 
        // {
        //     steps 
        //     {
        //         script 
        //         {
        //             sh """
        //             helm upgrade --install flaskgpt-app ${WORKSPACE}/devops/kubernetes/flaskGptApp \\
        //             --set image.repository=$REPOSITORY_URI \\
        //             --set image.tag=$VERSION \\
        //             --set replicaCount=2
        //             """
        //         }
        //     }
        // }
    }
}