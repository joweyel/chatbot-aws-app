
pipeline {
    agent
    {
        node
        {
            label 'python'
        }
    }
    environment
    {
        VENV_NAME = "build-venv"
        AWS_REGION = credentials("aws_region")
        AWS_PROFILE = credentials("aws_profile")
        ECR_REGISTRY = credentials("ecr_registry_url")
        ECR_REPOSITORY = "cv-app-ecr-repo"
        IMAGE_NAME = "${ECR_REGISTRY}/${ECR_REPOSITORY}/face-landmark-app"
        VERSION = "0.0"
    }

    stages
    {
        stage("Setup Python Environment")
        {
            steps
            {
                echo "----------------- START PYTHON SETUP -----------------"
                sh """
                    chmod +x download_models.sh
                    ./download_models.sh
                    python3.9 -m venv ${WORKSPACE}/${VENV_NAME}
                    . ${WORKSPACE}/${VENV_NAME}/bin/activate
                    pip install -r requirements-dev.txt
                """
                echo "------------------ END PYTHON SETUP ------------------"
            }
        }
        stage("Run Tests") {
            steps {
                echo "----------------- START Testing -----------------"
                sh """
                    . $WORKSPACE/${VENV_NAME}/bin/activate
                    pytest tests/ -v
                """
                echo "------------------ END Testing ------------------"
            }
        }

        stage("Linting the code") {
            steps {
                echo "----------------- START LINTING -----------------"
                sh """
                    . $WORKSPACE/${VENV_NAME}/bin/activate
                    pylint streamlit_app.py
                """
                echo "------------------ END LINTING ------------------"
            }
        }
        
        stage("Building Docker Image") {
            steps {
                script {
                    echo "----------------- START BUILDING DOCKER IMAGE -----------------"
                    def image_and_version = "${IMAGE_NAME}:${VERSION}"
                    app = docker.build(image_and_version)
                    echo "------------------ END BUILDING DOCKER IMAGE ------------------"
                }
            }
        }

        stage("Login to ECR") {
            steps {
                echo "------------------- LOGIN TO ECR ---------------------"
                sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                """
                echo "------------------ END LOGIN TO ECR ------------------"
            }
        }

        stage("Publish Docker Image to ECR") {
            steps {
                script {
                    echo '<--------------- DOCKER PUBLISH START --------------->'
                    app.push()
                    echo '<---------------- DOCKER PUBLISH END ---------------->'
                }
            }
        }

        // stage('Get EKS cluster credentials')
        // {
        //     steps
        //     {
        //         script
        //         {
        //             withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'cv_app_user-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
        //                 sh 'aws eks update-kubeconfig --region $AWS_REGION --name jw-eks-01'
        //             }
        //         }
        //     }
        // }
    }
}