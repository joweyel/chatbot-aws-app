pipeline {
    agent
    {
        node
        {
            label 'python'
        }
    }
    environment
    {
        VENV_NAME = "build-venv"
        AWS_USER = "app_user"
        AWS_REGION = credentials("aws_region")
        ECR_REGISTRY = credentials("ecr_registry_url")
        ECR_REPOSITORY = "flaskgpt-app"
        REPOSITORY_URI = "${ECR_REGISTRY}/${ECR_REPOSITORY}"
        S3_BUCKET = "eb-dockerrun-bucket"
    }

    stages
    {
        stage("Setup Python Environment")
        {
            steps
            {
                echo "----------------- START PYTHON SETUP -----------------"
                sh """
                    python3.9 -m venv ${WORKSPACE}/${VENV_NAME}
                    . ${WORKSPACE}/${VENV_NAME}/bin/activate
                    pip install -r requirements-dev.txt
                """
                echo "------------------ END PYTHON SETUP ------------------"
            }
        }

        stage("Get release version") 
        {
            steps 
            {
                script 
                {
                    env.VERSION = sh(
                        script: ". ${WORKSPACE}/${VENV_NAME}/bin/activate && python3 ${WORKSPACE}/util/get_version.py ${WORKSPACE}", 
                        returnStdout: true
                    ).trim()
                    echo "Version: ${env.VERSION}"
                }
            }
        }

        stage("Run Tests") 
        {
            steps 
            {
                echo "----------------- START Testing -----------------"
                withCredentials([string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY')]) 
                {
                    sh """
                        . $WORKSPACE/${VENV_NAME}/bin/activate
                        export PYTHONPATH=${WORKSPACE}
                        pytest tests/ -vv
                    """
                }
                echo "------------------ END Testing ------------------"
            }
        }

        stage("Linting the code") 
        {
            steps 
            {
                echo "----------------- START LINTING -----------------"
                sh """
                    . $WORKSPACE/${VENV_NAME}/bin/activate
                    pylint run.py website/
                """
                echo "------------------ END LINTING ------------------"
            }
        }
        
        stage("Building Docker Image")
        {
            steps {
                script {
                    echo '----------------- START BUILDING DOCKER IMAGE -----------------'
                    sh "docker build -t $ECR_REPOSITORY:${env.VERSION} ."
                    echo '------------------ END BUILDING DOCKER IMAGE ------------------'
                }
            }
        }

        stage("Login to ECR") 
        {
            steps 
            {
                echo "------------------- LOGIN TO ECR ---------------------"
                withAWS(credentials: "app_user-aws-creds", region: "${AWS_REGION}", profile: "app_user")
                {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    """
                }
                echo "------------------ END LOGIN TO ECR ------------------"
            }
        }

        stage("Publish Docker Image to ECR") 
        {
            steps 
            {
                script 
                {
                    echo '<--------------- DOCKER PUBLISH START --------------->'
                    sh "docker tag $ECR_REPOSITORY:${env.VERSION} $REPOSITORY_URI:${env.VERSION}"
                    sh "docker push $REPOSITORY_URI:${env.VERSION}"
                    echo '<---------------- DOCKER PUBLISH END ---------------->'
                }
            }
        }

        stage("Create Dockerrun.aws.json") 
        {
            steps
            {
                script
                {
                   writeFile file: 'Dockerrun.aws.json', text: """
{
    "AWSEBDockerrunVersion": "1",
    "Image": {
        "Name": "${REPOSITORY_URI}:${env.VERSION}",
        "Update": "true"
    },
    "Ports": [{
        "ContainerPort": "5000"
    }]
}
"""
                }
            }
        }

        stage("Upload Dockerrun to S3") 
        {
            steps
            {
                script
                {
                    echo "----------------- START UPLOADING Dockerrun.aws.json TO S3 -----------------"
                    sh """
                        zip -r app-${env.VERSION}.zip Dockerrun.aws.json
                        aws s3 cp app-${env.VERSION}.zip s3://${S3_BUCKET}/app-${env.VERSION}.zip
                    """
                    echo "------------------ END UPLOADING Dockerrun.aws.json TO S3 ------------------"
                }
            }
        }

        stage("Deploy to Elastic Beanstalk")
        {
            steps
            {
                script
                {
                    echo "--------------------- DEPLOY TO EB -----------------------"
                    withCredentials([
                        string(credentialsId: 'aws_access_key_id', variable: 'AWS_ACCESS_KEY_ID'), 
                        string(credentialsId: 'aws_secret_access_key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY')
                    ]) 
                    {
                        sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}

                        # Check if the application version exists
                        VERSION_EXISTS=\$(aws elasticbeanstalk describe-application-versions --application-name fgpt-app --version-labels \$VERSION --query "ApplicationVersions[0].VersionLabel" --output text)
                        if [ "\$VERSION_EXISTS" = "\$VERSION" ]; then
                            echo "Version \$VERSION already exists, deleting it."
                            aws elasticbeanstalk delete-application-version --application-name fgpt-app --version-label \$VERSION --delete-source-bundle
                        fi

                        aws elasticbeanstalk create-application-version --application-name fgpt-app --version-label \$VERSION --source-bundle S3Bucket=${S3_BUCKET},S3Key=app-\$VERSION.zip
                        aws elasticbeanstalk update-environment --application-name fgpt-app --environment-name fgpt-env --version-label \$VERSION --option-settings "Namespace=aws:elasticbeanstalk:application:environment,OptionName=OPENAI_API_KEY,Value=${OPENAI_API_KEY}"
                        """
                    }
                    echo "------------------- END DEPLOY TO EB ---------------------"
                }
            }
        }
    }
}